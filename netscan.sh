#!/bin/bash

###########################################
#---------------) Colors (----------------#
###########################################

#sed "s,YOU ARE ALREADY ROOT!!!,${SED_RED_YELLOW},"

C=$(printf '\033')
RED="${C}[1;31m"
SED_RED="${C}[1;31m&${C}[0m"
GREEN="${C}[1;32m"
SED_GREEN="${C}[1;32m&${C}[0m"
YELLOW="${C}[1;33m"
SED_YELLOW="${C}[1;33m&${C}[0m"
RED_YELLOW="${C}[1;31;103m"
SED_RED_YELLOW="${C}[1;31;103m&${C}[0m"
BLUE="${C}[1;34m"
SED_BLUE="${C}[1;34m&${C}[0m"
ITALIC_BLUE="${C}[1;34m${C}[3m"
LIGHT_MAGENTA="${C}[1;95m"
SED_LIGHT_MAGENTA="${C}[1;95m&${C}[0m"
LIGHT_CYAN="${C}[1;96m"
SED_LIGHT_CYAN="${C}[1;96m&${C}[0m"
LG="${C}[1;37m" #LightGray
SED_LG="${C}[1;37m&${C}[0m"
DG="${C}[1;90m" #DarkGray
SED_DG="${C}[1;90m&${C}[0m"
NC="${C}[0m"
UNDERLINED="${C}[5m"
ITALIC="${C}[3m"

echo "Welcome to Network Scanning tool"

echo -n "Enter IP Address: "
read IP

echo $IP

echo "Executing Quick Nmap Scan..."
sudo nmap -sV -sC $IP  -Pn -oN ./output/nmap_$IP.txt 

# echo "`n Executing UDP/TCP Scan..."
# sudo nmap -sV -sC $IP -sSU -sS -Pn -oN ./output/nmap_udp_tcp_$IP.txt 

echo ""
echo "=================================="
echo "       Grabbing the domain.."
echo "=================================="
echo ""

# Check if port 80 is open
if grep -qE "80/tcp\s+open" "./output/nmap_$IP.txt"; then
    echo "Port 80 is open"
    http="`curl -iL  http://$IP`"

    # Extract the domain from the Location header
    domain=$(echo "$http" | grep -i "Location:" | awk -F'[/]' '{print $3}')

    # Check if domain is found
    if [ -n "$domain" ]; then
        echo "Domain Found!!!" | sed "s,Domain Found!!!,${SED_BLUE},"
        echo "Domain: $domain" | sed "s,Domain,${SED_BLUE},"
    else
        echo "Domain not found" | sed "s,Domain not found,${SED_RED_YELLOW},"
    fi
else
    echo "Port 80 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi

# Check if port 443 is open
if grep -qE "443/tcp\s+open" "./output/nmap_$IP.txt"; then
    echo "Port 443 is open"

    https="`curl -iL  https://$IP`"

    # Extract the domain from the Location header
    domain=$(echo "$https" | grep -i "Location:" | awk -F'[/]' '{print $3}')

    # Check if domain is found
    if [ -n "$domain" ]; then
        echo "Domain Found!!!" | sed "s,Domain Found!!!,${SED_BLUE},"
        echo "Domain: $domain" | sed "s,Domain,${SED_BLUE},"
    else
        echo "Domain not found" | sed "s,Domain not found,${SED_RED_YELLOW},"
    fi
else
    echo "Port 443 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi


if [ -n "$domain" ]; then
    echo ""
    echo "Adding IP and domain to /etc/hosts" | sed "s,Adding IP and domain to /etc/hosts,${SED_LIGHT_CYAN},"

    # Check if the IP address is already linked to the domain
    grep -q "$IP\s*$domain" "/etc/hosts"
    if [ $? -ne 0 ]; then
        # IP address not found for the domain, so add it
        echo "$IP      $domain" | sudo tee -a "/etc/hosts" >/dev/null
        echo "Added $IP      $domain to /etc/hosts" | sed "s,/etc/hosts,${SED_BLUE},"
    else
        echo "$IP is already linked to $domain in /etc/hosts" 
    fi
    echo ""
fi

echo ""
echo "=================================="
echo "  Checking subdomains and vhost.."
echo "=================================="
echo ""

#-------------------------------------DIG WAY-----------------------------------------------------------
echo "Checking Subdomains"
# if [ -n "$domain" ]; then
#     for sub in $(cat ./wordlist/subdomains.txt); do
#     dig $sub.$domain @$IP | grep -v ';\|SOA' | sed -r '/^\s*$/d' | grep $sub | tee -a ./output/subdomains.txt
#     done
#     echo "subdomains file can be found under output folder!"
# else
#     echo "No domain found try checking manually..."
# fi
#------------------------------------digway---------------------------------------------------------------

if [ -n "$domain" ]; then
    gobuster dns -d $domain -w ./wordlist/subdomains.txt > ./output/subdomains_$IP.txt
else
    echo "No domain found try checking manually..."
fi


if [ -n "$domain" ]; then
    echo " Checking vhost"
    out="`cat ./wordlist/vhosts_test.txt | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://$IP -H "HOST: ${vhost}.$domain" | grep "Content-Length: ";done`"

    # Extract the value of Content-Length
    content_lengths=$(echo "$out" | grep "Content-Length" | awk '{print $2}')

    # Count the occurrences of Content-Length
    count=$(echo "$content_lengths" | wc -l)

    # Check if count is 3 or more
    if [ "$count" -ge 3 ]; then
        echo "This is a common length value: $(echo "$content_lengths" | head -n 1)"
    fi

    ffuf -w ./wordlist/subdomains.txt -u http://$IP -H "HOST: FUZZ.$domain" -fs $(echo "$content_lengths" | head -n 1 | awk '{print int($1)}') -o ./output/vhostRaw.json -of json
    
    echo "jq command not detected... Installing it"
    if ! command -v jq &> /dev/null; then
        sudo apt-get install -y jq
    fi

    # Extract hosts from the ffuf JSON output and save to a text file
    hosts=$(jq -r '.results[].host' "./output/vhostRaw.json")

    # Iterate through the hosts and print them to subdomains.txt
    for host in $hosts; do
    echo "$host"
    done > ./output/vhost_$IP.txt

    for vhost in $hosts;do
        # Check if the IP address is already linked to the domain
        grep -q "$IP\s*$vhost" "/etc/hosts"
        if [ $? -ne 0 ]; then
            # IP address not found for the domain, so add it
            echo "$IP      $vhost" | sudo tee -a "/etc/hosts" >/dev/null
            echo "Added $IP      $vhost to /etc/hosts" | sed "s,/etc/hosts,${SED_BLUE},"
        else
            echo "$IP is already linked to $vhost in /etc/hosts" 
        fi
    done
    echo "vhost are saved in the output folder!"
else
    echo "No domain found try checking manually..."
fi

echo ""
echo "=================================="
echo " Enumerating Website directories"
echo "=================================="
echo ""

if grep -qE "80/tcp\s+open" "./output/nmap_$IP.txt"; then
    dirsearch -u http://$domain -o ./output/dirsearch_$IP.txt
else
    echo "Port 80 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi

# Check if port 443 is open
if grep -qE "443/tcp\s+open" "./output/nmap_$IP.txt"; then
    dirsearch -u https://$domain -o ./output/dirsearch_$IP.txt
else
    echo "Port 443 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi


